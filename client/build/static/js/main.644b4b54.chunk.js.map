{"version":3,"sources":["helper/tezos.js","helper/WalletContext.js","helper/Loading.js","components/Header.js","helper/PredictionContext.js","components/Predict/index.js","components/Home/index.js","components/Mypreds/index.js","App.js","reportWebVitals.js","index.js"],"names":["CONTRACT_ADDRESS","TOKEN_ADDRESS","Tezos","TezosToolkit","setPackerProvider","MichelCodecPacker","ContractProvider","contract","beaconWallet","BeaconWallet","name","preferredNetwork","setWalletProvider","wallet","useWallet","React","useState","activeAccount","setActiveAccount","connected","setConnected","useEffect","client","getActiveAccount","then","acc","connect","requestPermissions","network","type","rpcUrl","req","accountInfo","disconnect","clearActiveAccount","Loading","display","flexDirection","minHeight","height","justifyContent","alignItems","size","Redeem","useDisclosure","isOpen","onOpen","onClose","submit","e","preventDefault","target","elements","tokenId","amount","console","log","value","at","methods","redeemTokens","parseInt","send","op","confirmation","alert","onClick","onSubmit","required","placeholder","Header","links","history","useNavigate","useColorMode","colorMode","toggleColorMode","whiteListProposer","addProposers","address","op1","color","useColorModeValue","bg","px","h","icon","md","spacing","fontSize","colorScheme","fontWeight","marginRight","base","as","Button","cursor","minW","maxW","overflow","whiteSpace","textOverflow","pb","Portfolio","colors","text","data","setData","ledger","tokenContract","storage","tokenStore","tokenLedger","tokens","all_tokens","toString","split","map","Number","get","push","id","balance","catch","error","length","flexWrap","pred","i","maxWidth","border","borderRadius","padding","margin","tokenID","Redeem1","returnFocusOnClose","placement","closeOnBlur","textColor","htmlFor","PredictionContext","createContext","predictions","predictionsArray","updatePredictions","BuySellWindow","options","option","quantity","request","setRequest","buySubmit","voteOnprediction","parseFloat","variant","width","onChange","direction","borderWidth","borderColor","p","isRequired","Predict","useParams","useContext","cardBg","_","predictionVoteSnapshot","snapshot","snapshotList","keys","Math","round","volume","prediction","predictionName","lastDate","Date","endTime","toLocaleDateString","toLocaleTimeString","key","ref","predictionRef","result","predictionVoteResult","pstatus","predictionStatus","predictionOptions","snap","Volume","disclosure","minH","flexDir","allowToggle","flex","Home","inProgressArray","filter","completedArray","maxHeight","href","AddPredRes","predictResults","marginLeft","UpdatePredStatus","status","updateStatus","AddNewPrediction","num","setNum","setOptions","resultRef","start","end","endValue","toISOString","startValue","addprediction","Object","Array","opt","MyPreds","myPreds","setMyPreds","admin","x","item","proposer","App","setPredictions","setPredictionsArray","preds","predArray","counter","Id","predList","initialColorMode","useSystemColorMode","Provider","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.644b4b54.chunk.js","sourcesContent":["import { NetworkType } from '@airgap/beacon-sdk';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { TezosToolkit, MichelCodecPacker, compose } from '@taquito/taquito';\n//import { Tzip12Module, tzip12 } from \"@taquito/tzip12\";\n//import { Tzip16Module, tzip16, bytes2Char } from \"@taquito/tzip16\";\n\n//const CONTRACT_ADDRESS = 'KT1BavDyS4Qkv2xeRTzy5mf37oJcmHTSgtHR';\n//const TOKEN_ADDRESS = 'KT19Spcv2j1ktJd5EBTkg4XbnaEeRD1tWmhW';\n//const CONTRACT_ADDRESS = 'KT1DwGe6b1x3iqCGMgrFykasxEErt986Rgox';\n//const TOKEN_ADDRESS = 'KT1BvYkPGPau7xDSRxLVz7DQpuWZfrXBLL27';\n\nconst CONTRACT_ADDRESS = 'KT1QM2Drh18w6fnU13fwxBCDAToWjKfcgZm5'; //-- Mainnet \nconst TOKEN_ADDRESS = 'KT1U8jQyUkwsYVpgogrjSAKyQXi8kWengpzp';\n\n//const Tezos = new TezosToolkit('https://hangzhounet.smartpy.io');\n//const Tezos = new TezosToolkit('https://ithacanet.smartpy.io');\n//const Tezos = new TezosToolkit('https://mainnet.smartpy.io');\nconst Tezos = new TezosToolkit('https://mainnet.api.tez.ie');\nTezos.setPackerProvider(new MichelCodecPacker());\n\nconst ContractProvider = Tezos.contract;\n\nconst beaconWallet = new BeaconWallet({\n  name: 'Predictor',\n  preferredNetwork: \"mainnet\"\n});\n\nTezos.setWalletProvider(beaconWallet);\n\nconst wallet = Tezos.wallet;\n\nexport { CONTRACT_ADDRESS,TOKEN_ADDRESS, Tezos, ContractProvider, wallet, beaconWallet };\n","import { NetworkType, Network , DAppClient} from '@airgap/beacon-sdk';\nimport React from 'react';\nimport { beaconWallet } from './tezos';\n\nconst useWallet = () => {\n  const [activeAccount, setActiveAccount] = React.useState(null);\n  const [connected, setConnected] = React.useState(false);\n\n  React.useEffect(() => {\n    beaconWallet.client.getActiveAccount().then((acc) => {\n      if (acc) {\n        setActiveAccount(acc);\n        setConnected(true);\n      }\n    });\n  }, [activeAccount]);\n\n  const connect = async () => {\n    const currAcc = await beaconWallet.client.getActiveAccount();\n    if (!currAcc) {\n      const req = await beaconWallet.client.requestPermissions({\n        network: {\n          type: 'mainnet',\n\t  rpcUrl: 'https://mainnet.api.tez.ie'\n        },\n      });\n      if (req) {\n        setActiveAccount(req.accountInfo);\n        setConnected(true);\n      }\n    }\n  };\n\n  const disconnect = () => {\n    beaconWallet.client.clearActiveAccount();\n    setConnected(false);\n  };\n\n  return { connect, disconnect, activeAccount, connected };\n};\n\nexport { useWallet };\n","import { Box } from '@chakra-ui/layout';\nimport { Spinner } from '@chakra-ui/react';\nimport React from 'react';\n\nexport default function Loading() {\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"row\"\n      minHeight=\"100vh\"\n      height=\"100%\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Spinner size=\"lg\" />\n    </Box>\n  );\n}\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport {\n  Box,\n  Flex,\n  HStack,\n  Container,\n  IconButton,\n  Button,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  useDisclosure,\n  useColorModeValue,\n  Stack,\n  useColorMode,\n  Text,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  FormControl,\n  FormLabel,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverHeader,\n  PopoverTrigger,\n  Input,\n} from '@chakra-ui/react';\nimport { HamburgerIcon, CloseIcon, SunIcon, MoonIcon } from '@chakra-ui/icons';\nimport { useWallet } from '../helper/WalletContext';\nimport { CONTRACT_ADDRESS, TOKEN_ADDRESS, wallet,Tezos } from '../helper/tezos';\nimport { TezosToolkit, MichelCodecPacker, compose } from '@taquito/taquito';\nimport Loading from '../helper/Loading';\n\n\n\nconst Redeem = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const submit = async (e) => {\n    e.preventDefault();\n    const { tokenId, amount } = e.target.elements;\n    console.log(tokenId.value, amount.value);\n    const contract = await wallet.at(CONTRACT_ADDRESS);\n\n    const op = await contract.methods\n      .redeemTokens(parseInt(amount.value), parseInt(tokenId.value))\n      .send();\n\tawait op.confirmation(1);\n    alert(\"Redemption Completed!\");  \n\t\n  };\n\n  return (\n    <>\n      <MenuItem onClick={onOpen}>Redeem</MenuItem>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Redeem Token</ModalHeader>\n          <ModalBody>\n            <form onSubmit={submit}>\n              <FormControl>\n                <Input\n                  required\n                  type=\"number\"\n                  name=\"tokenId\"\n                  placeholder=\"Token ID\"\n                ></Input>\n              </FormControl>\n              <FormControl>\n                <Input\n                  required\n                  type=\"number\"\n                  name=\"amount\"\n                  placeholder=\"Amount\"\n                />\n              </FormControl>\n              <Button type=\"submit\">Redeem</Button>\n            </form>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default function Header({ links = [] }) {\n  const history = useNavigate();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const { connect, disconnect, activeAccount, connected } = useWallet();\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  const whiteListProposer = async () => {\n    const contract = await wallet.at(CONTRACT_ADDRESS);\n    const op1 = await contract.methods.addProposers(activeAccount.address).send();\n\t\n\tawait op1.confirmation(1);\n    alert(\"Proposer Whitelisted!\");  \n  };  \n\n  return (\n    <Box\n      color={useColorModeValue('purple', 'white')}\n      bg={useColorModeValue('purple.100', 'purple.900')}\n      px={4}\n    >\n      <Flex h={16} alignItems={'center'} justifyContent={'space-between'}>\n        <IconButton\n          size={'md'}\n          icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n          aria-label={'Open Menu'}\n          display={{ md: 'none' }}\n          onClick={isOpen ? onClose : onOpen}\n        />\n\n        <HStack spacing={8} alignItems={'center'}>\n          <Box></Box>\n        </HStack>\n        <Text fontSize=\"3xl\" colorScheme=\"blue\" fontWeight=\"bold\">\n          Predictor\n        </Text>\n\n        <Flex alignItems={'center'}>\n          <IconButton\n            marginRight=\"10px\"\n            icon={colorMode === 'dark' ? <SunIcon /> : <MoonIcon />}\n            onClick={toggleColorMode}\n          />\n          <Box display={{ base: 'none', md: 'flex' }}>\n            {!connected ? (\n              <Button onClick={connect}>Connect Wallet</Button>\n            ) : (\n              <Menu>\n                <MenuButton as={Button} cursor={'pointer'} minW={0}>\n                  <Text\n                    maxW=\"300px\"\n                    overflow=\"hidden\"\n                    whiteSpace=\"nowrap\"\n                    textOverflow=\"ellipsis\"\n                  >\n                    {activeAccount?.address}\n                  </Text>\n                </MenuButton>\n                <MenuList>\n                  <MenuItem onClick={() => history('/mypreds')}>\n                    My Predictions\n                  </MenuItem>\n                  <MenuItem onClick={whiteListProposer}>Whitelist Me</MenuItem>\n                  <MenuItem onClick={disconnect}>Disconnect</MenuItem>\n\t\t\t\t  <Portfolio />\n                  <Redeem />\n                </MenuList>\n              </Menu>\n            )}\n          </Box>\n        </Flex>\n      </Flex>\n\n      {isOpen ? (\n        <Box pb={4} display={{ md: 'none' }}>\n          <Stack as={'nav'} spacing={4}>\n            {!connected ? (\n              <Button onClick={connect}>Connect Wallet</Button>\n            ) : (\n              <Menu>\n                <MenuButton as={Button} cursor={'pointer'} minW={0}>\n                  <Text\n                    maxW=\"300px\"\n                    overflow=\"hidden\"\n                    whiteSpace=\"nowrap\"\n                    textOverflow=\"ellipsis\"\n                  >\n                    {activeAccount?.address}\n                  </Text>\n                </MenuButton>\n                <MenuList>\n                  <MenuItem onClick={() => history('/mypreds')}>\n                    My Predictions\n                  </MenuItem>\n                  <MenuItem onClick={disconnect}>Disconnect</MenuItem>\n                </MenuList>\n              </Menu>\n            )}\n          </Stack>\n        </Box>\n      ) : null}\n    </Box>\n  );\n}\n\n\nconst Portfolio = () => {\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst colors = {\n    bg: useColorModeValue('purple.100', 'purple.700'),\n    text: useColorModeValue('blue', 'white'),\n\t\n  };\n\tconst { connect, disconnect, activeAccount, connected } = useWallet();\n\tconst [data, setData] = React.useState(null);\n\tlet ledger = [];\n\tReact.useEffect( async () => {\n\t\tif (!connected) {\n\t\t\tawait connect();\n\t\t}\n\t\tif (activeAccount) {\n\t\t\tconsole.log(activeAccount);\n\t\t\tconsole.log(activeAccount.address);\n\t\t\tconst tokenContract =await Tezos.contract.at(TOKEN_ADDRESS);\n\t\t\tconst tokenStore = await tokenContract.storage();\n\t\t\tconst tokenLedger = tokenStore.ledger;\n\t\t\tconsole.log(tokenLedger);\n\t\t\tlet tokens = tokenStore.all_tokens.toString().split(',').map(Number);\n\t\t\tconsole.log(tokens);\n\t\t\t\n\t\t\tfor (let tokenId = tokens.length-1 ; tokenId>=0; tokenId--) {\t\n\t\t\t\tconsole.log(tokenId,tokens[tokenId]);\n\t\t\t\tawait tokenLedger.get([activeAccount.address, tokens[tokenId]])\n\t\t\t\t\t.then(value => { if(value > 0) {ledger.push({id:tokens[tokenId], balance: value.toString()})}})\n\t\t\t\t\t.catch(error => console.log(`Error: ${tokens[tokenId]} ${activeAccount.address}`));\n\t\t\t\tconsole.log(ledger)\n\n\t\t\t};\n\t\t\t\n\t\t\tsetData(ledger);\n\t\t};\n\t\n\t},[activeAccount]);\n\treturn data ?(\n\t<>\n      <MenuItem onClick={onOpen}>Portfolio</MenuItem>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Portfolio Details</ModalHeader>\n          <ModalBody>\n\t\n\t\t\t<Text color={colors.text}> <b> Portfolio </b> </Text>\n\t\t\t\n      \t\t<Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\n\t\t\t\t{data.map((pred, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\tkey={i}\n\t\t\t    \t\t\t//onClick={}\n\t\t\t\t\t\t\tdisplay=\"flex\"\n\t\t\t\t\t\t\tmaxWidth=\"400px\"\n\t\t\t\t\t\t\tflexDirection=\"row\"\n\t\t\t\t\t\t\tborder=\"0px solid\"\n\t\t\t\t\t\t\tborderRadius=\"15px\"\n\t\t\t\t\t\t\tpadding=\"5px\"\n\t\t\t\t\t\t\tmargin=\"5px\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Token id &nbsp;: &nbsp; {pred.id} &nbsp; |&nbsp;</Text>\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Balance &nbsp; : &nbsp; {pred.balance}&emsp;</Text>\n\t\t\t\t\t\t\t\t<Redeem1 tokenID={pred.id} />\n\t\t\t\t\t\t</Box>\n\t\t            );\n                })}\n\t\t\t</Box>\n\t\t\t</ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n \n  ):(\n    <Loading />\n  );\n};\n\nconst Redeem1 = (tokenID) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\tconsole.log(\"tokenId\", tokenID.tokenID.toString());\n\tconst colors = {\n    bg: useColorModeValue('purple.300', 'purple.600'),\n    text: useColorModeValue('purple', 'white'),}\n  const submit = async (e) => {\n    e.preventDefault();\n    const { amount } = e.target.elements;\n    console.log(tokenID.tokenID, amount.value);\n    const contract = await wallet.at(CONTRACT_ADDRESS);\n\n    await contract.methods\n      .redeemTokens(amount.value, tokenID.tokenID)\n      .send();\n  };\n\n  return (\n     \n      <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\n      <PopoverTrigger>\n        <Button bg={colors.bg} textColor={colors.text}>\n          Redeem\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent textColor={colors.text}>\n        <PopoverHeader fontWeight=\"semibold\">\n          Redeem Token\n        </PopoverHeader>\n        <PopoverBody>\n            <form onSubmit={submit}>\n             <FormControl>\n            <FormLabel htmlFor=\"tokenID\">Token Id : {tokenID.tokenID.toString()} </FormLabel>\n            \n          </FormControl>\n              <FormControl>\n                <Input\n                  required\n                  type=\"number\"\n                  name=\"amount\"\n                  placeholder=\"Amount\"\n                />\n              </FormControl>\n              <Button type=\"submit\">Redeem</Button>\n            </form>\n       </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  \n  );\n};\n\n\t\n\t","import React from 'react';\n\nconst PredictionContext = React.createContext({\n  predictions: {},\n  predictionsArray: [],\n  updatePredictions: () => {},\n});\n\nexport default PredictionContext;\n","import React from 'react';\nimport {\n  Box,\n  Container,\n  useColorModeValue,\n  Text,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanels,\n  TabPanel,\n  Button,\n  RadioGroup,\n  Stack,\n  Radio,\n  NumberInput,\n  NumberInputField,\n  Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,\n} from '@chakra-ui/react';\nimport PredictionContext from '../../helper/PredictionContext';\nimport { useParams  } from 'react-router-dom';\nimport Loading from '../../helper/Loading';\nimport { CONTRACT_ADDRESS, wallet } from '../../helper/tezos';\n\nconst BuySellWindow = ({ id, options }) => {\n  const [request, setRequest] = React.useState({\n    option: options[0],\n    quantity: 0,\n  });\n\n  const buySubmit = async (e) => {\n    e.preventDefault();\n    const { option, quantity } = e.target.elements;\n\n    const contract = await wallet.at(CONTRACT_ADDRESS);\n\tid = Number(id);\n\n    const op = await contract.methods\n      .voteOnprediction(id, option.value)\n      .send({\n        amount: parseFloat(quantity.value / 100) ,\n      })\n      \n\tawait op.confirmation(1);\n    alert(\"Transaction Completed!\");  \n  };\n\n  return (\n    <Tabs variant=\"soft-rounded\" width=\"100%\">\n      <TabList>\n        <Tab>Options</Tab>\n      </TabList>\n      <TabPanels>\n        <TabPanel>\n          <form onSubmit={buySubmit}>\n            <Container\n              padding={{ base: '0' }}\n              display=\"flex\"\n              flexDirection=\"column\"\n            >\n              <Box margin=\"3\">\n                <Text fontWeight=\"bold\" fontSize=\"md\">\n                  Pick an option\n                </Text>\n                <RadioGroup\n                  onChange={(e) =>\n                    setRequest((request) => {\n                      return {\n                        ...request,\n                        option: e,\n                      };\n                    })\n                  }\n                  value={request.option}\n                  name=\"option\"\n                >\n                  <Stack direction=\"column\">\n                    {options.map((option, i) => {\n                      return (\n                        <Radio key={i} value={option}>\n                          <Box\n                            borderWidth=\"1px\"\n                            borderColor=\"gray.400\"\n                            p=\"2\"\n                            borderRadius=\"2xl\"\n                          >\n                            {option}\n                          </Box>\n                        </Radio>\n                      );\n                    })}\n                  </Stack>\n                </RadioGroup>\n              </Box>\n              <Box margin=\"3\">\n                <Text fontWeight=\"bold\" fontSize=\"lg\">\n                  Amount of shares\n                </Text>\n                <NumberInput\n                  isRequired\n                  placeholder=\"Shares\"\n                  onChange={(e) =>\n                    setRequest((request) => {\n                      return {\n                        ...request,\n                        quantity: e,\n                      };\n                    })\n                  }\n                  value={request.quantity}\n                  name=\"quantity\"\n                >\n                  <NumberInputField />\n                </NumberInput>\n              </Box>\n              <Box margin=\"3\">\n                <Button type=\"submit\">Buy</Button>\n              </Box>\n            </Container>\n          </form>\n        </TabPanel>\n        <TabPanel>Lol2</TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n};\n\n\nexport default function Predict() {\n  \n  let { id } = useParams();\n  console.log( \"ID \", id);\n  id = id.toString();\n  const { predictions } = React.useContext(PredictionContext);\n  const [data, setData] = React.useState(null);\n  const colors = {\n    bg: useColorModeValue('blue.100', 'blue.900'),\n    text: useColorModeValue('blue', 'white'),\n    border: useColorModeValue('purple.900', 'purple.100'),\n    cardBg: useColorModeValue('blue.200', 'blue.700'),\n  };\n\n  React.useEffect(async () => {\n    const _ = await predictions.get(id).then(value => {return value});\n\tconst contract = await wallet.at(CONTRACT_ADDRESS);\n\t\tconst storage = await contract.storage();\n\t\tconst snapshot = await storage.predictionVoteSnapshot.get(id).then(value => {return value});\n\t\tconst snapshotList = [];\n\t\t\n\t\tfor (let pred of snapshot.keys()) {\n\t\t\tif (pred != 'Total') {\t\t\t  \n\t\t  snapshotList.push({ id: pred, value: (Math.round(snapshot.get(pred) * 100 / snapshot.get('Total'))).toString() }); }\n\t\t  \n\t\t  console.log(snapshotList);\n\t\t  \n      }\n\t  \n\t  let volume = (snapshot.get('Total') / 100).toString();\n\t  console.log(\"volume :\", volume);\n\n\tsetData({\n      prediction: _.predictionName,\n      lastDate:\n        new Date(_.endTime).toLocaleDateString() +\n        ' ' +\n        new Date(_.endTime).toLocaleTimeString(),\n      key: id,\n      ref: _.predictionRef,\n\t  result: _.predictionVoteResult,\n      pstatus: _.predictionStatus,\n      options: _.predictionOptions,\n\t  snap : snapshotList,\n\t  Volume : volume,\n\n      disclosure:\n        \"Predictor is for informational and educational purposes only. We take no custody of anyone's money or cryptocurrency. Predictor displays existing markets live on the Tezos blockchain and is a graphical user interface for both visualizing data and market trends from on-chain activity, and interacting with said smart contracts directly via your Web 3 enabled wallet.\",\n    });\n  }, []);\n\n  return data ? (\n    <Container\n      maxWidth=\"100vw\"\n      width=\"auto\"\n      bg={colors.bg}\n      color={colors.text}\n      height=\"auto\"\n      minH=\"92vh\"\n      display=\"flex\"\n      flexDir=\"column\"\n      justifyContent=\"center\"\n      padding=\"0 15% 0 15%\"\n    >\n      <Accordion allowToggle margin=\"6\">\n        <AccordionItem>\n          <h2>\n            <AccordionButton>\n              <Box flex=\"1\">Please Read this before making any purchases</Box>\n            </AccordionButton>\n          </h2>\n          <AccordionPanel p=\"6\">{data.disclosure}</AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n      <Box\n        p=\"6\"\n        maxW=\"max-content\"\n        borderWidth=\"1px\"\n        borderRadius=\"lg\"\n        borderColor={colors.border}\n        overflow=\"hidden\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        flexWrap=\"wrap\"\n      >\n        <Text fontSize=\"sm\">Prediction id: {data.ref} </Text>\n\n        <Text\n          fontSize=\"lg\"\n          fontWeight=\"bold\"\n          margin={{ base: '1', md: '1' }}\n          maxWidth=\"lg\"\n          overflow=\"visible\"\n          textOverflow=\"clip\"\n        >\n          {data.prediction}\n        </Text>\n      </Box>\n      <Box\n        p=\"3\"\n        maxW=\"max-content\"\n        borderWidth=\"1px\"\n        borderRadius=\"lg\"\n        borderColor={colors.border}\n        overflow=\"hidden\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n      >\n        <Box\n          p=\"2\"\n          maxW=\"sm\"\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          borderColor={colors.border}\n          bg={colors.cardBg}\n          overflow=\"hidden\"\n          display=\"flex\"\n          flexDir=\"column\"\n          margin={{ base: '0', md: '2' }}\n        >\n          <Text fontSize=\"sm\">Open Till</Text>\n          <Text fontSize=\"l\">{data.lastDate}</Text>\n        </Box>\n        <Box\n          p=\"2\"\n          maxW=\"sm\"\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          borderColor={colors.border}\n          bg={colors.cardBg}\n          overflow=\"hidden\"\n          display=\"flex\"\n          flexDir=\"column\"\n          margin={{ base: '0', md: '2' }}\n        >\n          <Text fontSize=\"sm\">Status</Text>\n          <Text fontSize=\"l\">{data.pstatus}</Text>\n        </Box>\n\t\t<Box\n          p=\"2\"\n          maxW=\"sm\"\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          borderColor={colors.border}\n          bg={colors.cardBg}\n          overflow=\"hidden\"\n          display=\"flex\"\n          flexDir=\"column\"\n          margin={{ base: '0', md: '2' }}\n        >\n          <Text fontSize=\"sm\">Result</Text>\n          <Text fontSize=\"l\">{data.result}</Text>\n        </Box>\n\n      </Box>\n\t  <Text fontSize=\"sm\">Volume :</Text>\n         <Box p=\"2\"\n\t\t\t\t\tmaxW=\"sm\"\n\t\t\t\t\tborderWidth=\"1px\"\n\t\t\t\t\tborderRadius=\"lg\"\n\t\t\t\t\tborderColor={colors.border}\n\n\t\t\t\t\toverflow=\"hidden\"\n\t\t\t\t\tdisplay=\"flex\"\n\t\t\t\t\tflexDir=\"row\" flexWrap=\"wrap\">\n\t\t\t\t\t\n\t\t  <Box p=\"2\"\n\t\t\t\t\tmaxW=\"sm\"\n\t\t\t\t\tborderWidth=\"1px\"\n\t\t\t\t\tborderRadius=\"lg\"\n\t\t\t\t\tborderColor={colors.border}\n\t\t\t\t\tbg={colors.cardBg}\n\t\t\t\t\toverflow=\"hidden\"\n\t\t\t\t\tdisplay=\"flex\"\n\t\t\t\t\tflexDir=\"row\"\n\t\t\t\t\tmargin={{ base: '0', md: '1' }}>\n\t\t  <Text color={colors.text}>Total : &nbsp;</Text>\n\t\t  <Text color={colors.text}>{data.Volume} Tez</Text>\n\t\t  </Box>\n\t\t \n        {data.snap.map((pred, i) => {\n          return (\n           \n\t\t\t\t<Box p=\"2\"\n\t\t\t\t\tmaxW=\"sm\"\n\t\t\t\t\tborderWidth=\"1px\"\n\t\t\t\t\tborderRadius=\"lg\"\n\t\t\t\t\tborderColor={colors.border}\n\t\t\t\t\tbg={colors.cardBg}\n\t\t\t\t\toverflow=\"hidden\"\n\t\t\t\t\tdisplay=\"flex\"\n\t\t\t\t\tflexDir=\"row\"\n\t\t\t\t\tmargin={{ base: '0', md: '1' }}>\n              <Text color={colors.text}>{pred.id} : &nbsp;</Text>\n\t\t\t  \n\t\t\t  <Text color={colors.text}>{pred.value} %</Text>\n\t\t\t  </Box>\n   \n          );\n        })}\n      </Box>\n\t  <Box\n        margin=\"6\"\n        p={{ base: '2', md: '6' }}\n        maxW=\"max-content\"\n        borderWidth=\"1px\"\n        borderRadius=\"lg\"\n        borderColor={colors.border}\n        overflow=\"hidden\"\n        display=\"flex\"\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n      >\n        <BuySellWindow id={id} options={data.options} />\n      </Box>\n\n    </Container>\n  ) : (\n    <Loading />\n  );\n}\n\n\n\n","import React from 'react';\nimport { Box, Container, Text, useColorModeValue, Accordion,\n  AccordionItem,\n  AccordionButton,\n  AccordionPanel,  } from '@chakra-ui/react';\nimport PredictionContext from '../../helper/PredictionContext';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function Home() {\n  const { predictionsArray } = React.useContext(PredictionContext);\n  const history = useNavigate();\n  const colors = {\n    bg: useColorModeValue('blue.100', 'blue.900'),\n    text: useColorModeValue('blue', 'white'),\n  };\n  const inProgressArray = predictionsArray.filter(function(prediction)\n\t\t\t\t{ return prediction.value.predictionStatus == \"Prediction In-Progress\"; });\n  const completedArray = predictionsArray.filter(function(prediction)\n\t\t\t\t{ return prediction.value.predictionStatus != \"Prediction In-Progress\"; });\n\n  return (\n    <Container\n      width=\"auto\"\n      maxWidth=\"100vw\"\n      bg={colors.bg}\n      height=\"auto\"\n      maxHeight=\"1000vh\"\n      padding=\"5vh\"\n    >\n\t<Text color={colors.text} text-align = 'center'> Join the community on  <a href = 'https://t.me/+wcqQOgMRyMBkZDll' target=\"_blank\"> <b>telegram</b></a> for any queries.<br/> </Text>\n\t<Accordion allowToggle margin=\"6\">\n        \t<AccordionItem>\n          \t<h2>\n            \t<AccordionButton>\n              \t\t<Box flex=\"1\">Read this to get familiar with Predictor Platform</Box>\n            \t</AccordionButton>\n          \t</h2>\n          <AccordionPanel p=\"6\"> \"Predictor is for informational and educational purposes only. We take no custody of anyone's money or cryptocurrency. <br/> \n\t\t\t\t  Read this <a href = 'https://medium.com/coinmonks/predictor-da7efb0163ca/' target=\"_blank\"> <b>article</b></a> to know more about Predictor.<br/> \n\t\t\t\t  Read this <a href = 'https://medium.com/@karthi1908/predictor-c90398056061' target= \"_blank\"><b>article</b></a> to get started on Predictor <br/>\n\t\t\t\t  Read this <a href = 'https://medium.com/@karthi1908/predictor-d01e6c67de0e/' target=\"_blank\"> <b>article</b></a> to understand how to use predictor to predict events.<br/> \n\t\t\t\t  Predictor displays existing markets live on the Tezos blockchain and is a graphical user interface for both visualizing data and market trends from on-chain activity, and interacting with said smart contracts directly via your Web 3 enabled wallet.\"</AccordionPanel>\n        </AccordionItem>\n      </Accordion>\n\t  \n\t\t<Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\n        \t\t<Text color={colors.text}> <b>Current Predictions </b></Text>\n\t  \t\t<Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\n        \t\t\t{inProgressArray.map((pred, i) => {\n          \t\t\t\treturn (\n           \t\t\t\t\t <Box\n              \t\t\t\t\t\tkey={i}\n              \t\t\t\t\t\tonClick={() => history('/predict/' + pred.id)}\n              \t\t\t\t\t\tdisplay=\"flex\"\n              \t\t\t\t\t\tmaxWidth=\"200px\"\n              \t\t\t\t\t\tborder=\"1px solid\"\n\t\t\t  \t\t\t\tborderColor=\"purple.400\"\n              \t\t\t\t\t\tborderRadius=\"20px\"\n\t\t\t  \t\t\t\tflexDirection=\"row\"\n              \t\t\t\t\t\tpadding=\"20px\"\n              \t\t\t\t\t\tmargin=\"10px\"\n           \t\t\t\t\t >\n\t\t\t\t\t\t\t<Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\n              \t\t\t\t\t\t\t<Text color={colors.text}> <b>ID </b>: {pred.value.predictionRef}</Text>\n\t\t\t  \t\t\t\t\t<Text color='orange'>  {pred.value.predictionName} </Text>\t\t\t  \n\t\t\t  \t\t\t\t\t<Text color={colors.text}><b>Status </b>: {pred.value.predictionStatus}</Text>\n\t\t\t  \t\t\t\t</Box>\n            \t\t\t\t\t</Box>\n          \t\t\t\t);\n        \t\t\t})}\n\t\t\t</Box>\n\t\t \t<Text color={colors.text}> <b>Completed Predictions </b></Text>\n\t\t \t<Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\n\t\t\t\t{completedArray.map((pred, i) => {\n          \t\t\t\treturn (\n            \t\t\t\t\t<Box\n              \t\t\t\t\t\tkey={i}\n             \t \t\t\t\t\tonClick={() => history('/predict/' + pred.id)}\n              \t\t\t\t\t\tdisplay=\"flex\"\n              \t\t\t\t\t\tmaxWidth=\"200px\"\n              \t\t\t\t\t\tborder=\"1px solid\"\n\t\t\t  \t\t\t\tborderColor=\"purple.400\"\n\t\t\t  \t\t\t\tflexDirection=\"row\"\n              \t\t\t\t\t\tborderRadius=\"20px\"\n              \t\t\t\t\t\tpadding=\"20px\"\n              \t\t\t\t\t\tmargin=\"10px\"\n            \t\t\t\t\t>\n\t\t\t\t\t\t\t<Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\n              \t\t\t\t\t\t\t<Text color={colors.text}> <b>ID </b>: {pred.value.predictionRef}</Text>\n\t\t\t  \t\t\t\t\t<Text color='orange'>  {pred.value.predictionName} </Text>\t\t\t  \n\t\t\t  \t\t\t\t\t<Text color={colors.text}><b>Status </b>: {pred.value.predictionStatus}</Text>\n\t\t\t  \t\t\t\t</Box>\n            \t\t\t\t\t</Box>\n          \t\t\t\t);\n        \t\t\t})}\n\t\t\t</Box>\n      \t\t</Box>\n    </Container>\n  );\n}\n","import React from 'react';\nimport PredictionContext from '../../helper/PredictionContext';\nimport {\n  Box,\n  Button,\n  Container,\n  FormControl,\n  FormLabel,\n  Input,\n  NumberInput,\n  Popover,\n  PopoverBody,\n  PopoverContent,\n  PopoverHeader,\n  PopoverTrigger,\n  Radio,\n  RadioGroup,\n  Stack,\n  Text,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { useWallet } from '../../helper/WalletContext';\nimport Loading from '../../helper/Loading';\nimport { CONTRACT_ADDRESS, wallet, Tezos, TOKEN_ADDRESS } from '../../helper/tezos';\n\nconst AddPredRes = ({ pred }) => {\n  const colors = {\n    bg: useColorModeValue('blue.200', 'blue.700'),\n    text: useColorModeValue('blue', 'white'),\n  };\n\n  const submit = async (e) => {\n    e.preventDefault();\n    const { option } = e.target.elements;\n    console.log(option.value);\n    const contract = await wallet.at(CONTRACT_ADDRESS);\n    const result = await contract.methods.predictResults(pred.predictionRef, option.value).send();\n\tawait result.confirmation(1);\n    alert(\"Result Updated!\");  \n  };\n\n  return (\n    <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\n      <PopoverTrigger>\n        <Button bg={colors.bg} textColor={colors.text} marginLeft=\"10px\">\n          Result\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent textColor={colors.text}>\n        <PopoverHeader fontWeight=\"semibold\">\n          Update Prediction Result\n        </PopoverHeader>\n        <PopoverBody>\n          <form onSubmit={submit}>\n            <FormControl>\n              <FormLabel htmlFor={pred.id + '_status'}>Options</FormLabel>\n              <RadioGroup name=\"option\">\n                <Stack direction=\"column\">\n                  {pred.predictionOptions.map((option, i) => {\n                    return (\n                      <Radio key={i} value={option}>\n                        <Box\n                          borderWidth=\"1px\"\n                          borderColor=\"purple.400\"\n                          p=\"2\"\n                          borderRadius=\"2xl\"\n                        >\n                          {option}\n                        </Box>\n                      </Radio>\n                    );\n                  })}\n                </Stack>\n              </RadioGroup>\n            </FormControl>\n            <Button type=\"submit\">Submit</Button>\n          </form>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nconst UpdatePredStatus = ({ pred }) => {\n  const colors = {\n    bg: useColorModeValue('blue.200', 'blue.700'),\n    text: useColorModeValue('blue', 'white'),\n\t\n  };\n\n  const submit = async (e) => {\n    e.preventDefault();\n    const { status } = e.target.elements;\n\t\n    const contract = await wallet.at(CONTRACT_ADDRESS);\n    const st = await contract.methods.updateStatus(pred.predictionRef, status.value).send();\n\tst.confirmation();\n\talert(\"Status Updated!\"); \n  };\n  return (\n    <Popover returnFocusOnClose={false} placement=\"right\" closeOnBlur={false}>\n      <PopoverTrigger>\n        <Button bg={colors.bg} textColor={colors.text}>\n          Update\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent textColor={colors.text}>\n        <PopoverHeader fontWeight=\"semibold\">\n          Update Prediction Status\n        </PopoverHeader>\n        <PopoverBody>\n          <form onSubmit={submit}>\n            <FormControl>\n              <FormLabel htmlFor={pred.id + '_status'}>Status</FormLabel>\n              <RadioGroup name=\"status\">\n                <Stack direction=\"column\">\n                  {[\n                    'Prediction In-Progress',\n                    'Prediction Ended',\n                    'Result Declared',\n\t\t\t\t\t'Cancelled',\n                  ].map((option, i) => {\n                    return (\n                      <Radio key={i} value={option}>\n                        <Box\n                          borderWidth=\"1px\"\n                          borderColor=\"purple.400\"\n                          p=\"2\"\n                          borderRadius=\"2xl\"\n                        >\n                          {option}\n                        </Box>\n                      </Radio>\n                    );\n                  })}\n                </Stack>\n              </RadioGroup>\n            </FormControl>\n            <Button type=\"submit\">Submit</Button>\n          </form>\n        </PopoverBody>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nconst AddNewPrediction = () => {\n  const [num, setNum] = React.useState(0);\n  // const { connected, connect, activeAccount } = useWallet();\n  const [options, setOptions] = React.useState({});\n\n  const submit = async (e) => {\n    e.preventDefault();\n    const { prediction, resultRef, start, end } = e.target.elements;\n\n    const contract = await wallet.at(CONTRACT_ADDRESS);\n\tconst endValue = new Date(end.value).toISOString();\n\tconst startValue = new Date(start.value).toISOString();\n\n    const op = await contract.methods\n      .addprediction(\n        endValue,\n        resultRef.value,\n        prediction.value,\n        Object.keys(options).map((key) => options[key]),\n        startValue\n      )\n      .send({amount : 2});\n\tawait op.confirmation(1);\n    alert(\"Prediction Created!\");\n  };\n  return (\n    <Popover>\n      <PopoverTrigger>\n        <Button>Add New Prediction</Button>\n      </PopoverTrigger>\n      <PopoverContent padding=\"4\">\n        <form onSubmit={submit}>\n          <FormControl>\n            <FormLabel htmlFor=\"prediction\">Prediction</FormLabel>\n            <Input name=\"prediction\" id=\"prediction\"></Input>\n          </FormControl>\n          <FormControl>\n            <FormLabel htmlFor=\"resultRef\">Result Reference</FormLabel>\n            <Input name=\"resultRef\" id=\"resultRef\"></Input>\n          </FormControl>\n          <FormControl>\n            <FormLabel htmlFor=\"start\">Start</FormLabel>\n            <Input type=\"datetime-local\" name=\"start\" id=\"start\"></Input>\n          </FormControl>\n          <FormControl>\n            <FormLabel htmlFor=\"end\">End</FormLabel>\n            <Input type=\"datetime-local\" name=\"end\" id=\"end\"></Input>\n          </FormControl>\n          <FormControl>\n            <FormLabel htmlFor=\"number_options\">Number of Options</FormLabel>\n            <Input\n              onChange={(e) => {\n                console.log(e);\n                setNum(parseInt(e.target.value) || 0);\n              }}\n              name=\"number_options\"\n              id=\"number_options\"\n              type=\"number\"\n            ></Input>\n          </FormControl>\n          {[...Array(num).keys()].map((i) => {\n            return (\n              <FormControl>\n                <FormLabel htmlFor={'option_' + i}>Option {i}</FormLabel>\n                <Input\n                  onChange={(e) =>\n                    setOptions((options) => {\n                      var opt = options;\n                      opt[`option_${i}`] = e.target.value;\n                      return opt;\n                    })\n                  }\n                  name={`option_${i}`}\n                  id={`option_${i}`}\n                ></Input>\n              </FormControl>\n            );\n          })}\n          <Button type=\"submit\">Submit</Button>\n        </form>\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport default function MyPreds() {\n  const { predictionsArray } = React.useContext(PredictionContext);\n  const { connected, connect, activeAccount } = useWallet();\n  const [myPreds, setMyPreds] = React.useState([]);\n  const colors = {\n    bg: useColorModeValue('blue.100', 'blue.900'),\n    text: useColorModeValue('blue', 'white'),\n  };\n\n  \n\n  React.useEffect(() => {\n    (async function () {\n      if (!connected) {\n        await connect();\n      }\n\t    const contract = await wallet.at(CONTRACT_ADDRESS);\n\t\tconst storage = await contract.storage();\n\t\tconst admin = storage.admin;\n\t\tconsole.log(admin);\n      if (activeAccount) {\n\n        const _ = []; \n\t\tfor ( let x = 0 ; x < predictionsArray.length ; x++) {\n\t\t\t  \n\t\t\t  let item = predictionsArray[x].value;\n\t\t\t if (item.proposer === activeAccount.address || admin === activeAccount.address) {\n\t\t\t\t_.push(item);\n\t\t\t\t\n\t\t\t }\n\t\t}\n        console.log(_);\n        setMyPreds(_);\n      }\n    })();\n  }, [activeAccount]);\n\n  return myPreds ? (\n    <Container\n      width=\"auto\"\n      maxWidth=\"100vw\"\n      bg={colors.bg}\n      height=\"auto\"\n      maxHeight=\"100vh\"\n      padding=\"10vh\"\n    >\n      <AddNewPrediction />\n      <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\n        {myPreds.map((pred, i) => {\n          return (\n            <Box\n              key={i}\n              // onClick={}\n              display=\"flex\"\n              maxWidth=\"300px\"\n              border=\"1px solid\"\n              borderRadius=\"15px\"\n              padding=\"20px\"\n              margin=\"10px\"\n            >\n              <Text color={colors.text}>{pred.predictionName}</Text>\n              <UpdatePredStatus pred={pred} />\n              <AddPredRes pred={pred} />\n            </Box>\n          );\n        })}\n      </Box>\n\t \n    </Container>\n\n  ) : (\n    <Loading />\n  );\n}\n\nconst Portfolio = () => {\n\t//const { isOpen, onOpen, onClose } = useDisclosure();\n\tconst colors = {\n    bg: useColorModeValue('blue.100', 'blue.900'),\n    text: useColorModeValue('blue', 'white'),\n\t\n  };\n\tconst { connect, disconnect, activeAccount, connected } = useWallet();\n\tconst [data, setData] = React.useState(null);\n\tlet ledger = [];\n\tReact.useEffect( async () => {\n\t\tif (!connected) {\n\t\t\tawait connect();\n\t\t}\n\t\tif (activeAccount) {\n\t\t\tconsole.log(activeAccount);\n\t\t\tconsole.log(activeAccount.address);\n\t\t\tconst tokenContract =await Tezos.contract.at(TOKEN_ADDRESS);\n\t\t\tconst tokenStore = await tokenContract.storage();\n\t\t\tconst tokenLedger = tokenStore.ledger;\n\t\t\tconsole.log(tokenLedger);\n\t\t\tlet tokens = tokenStore.all_tokens.toString().split(',').map(Number);\n\t\t\tconsole.log(tokens);\n\t\t\t\n\t\t\tfor (let tokenId = tokens.length-1 ; tokenId>=0; tokenId--) {\t\n\t\t\t\tconsole.log(tokenId,tokens[tokenId]);\n\t\t\t\tawait tokenLedger.get([activeAccount.address, tokens[tokenId]])\n\t\t\t\t\t.then(value => { ledger.push({id:tokens[tokenId], balance: value.toString()})})\n\t\t\t\t\t.catch(error => console.log(`Error: ${tokens[tokenId]} ${activeAccount.address}`));\n\t\t\t\tconsole.log(ledger)\n\n\t\t\t};\n\t\t\t\n\t\t\tsetData(ledger);\n\t\t};\n\t\n\t},[activeAccount]);\n\treturn data ?(\n\t<Container\n      width=\"auto\"\n      maxWidth=\"100vw\"\n      bg={colors.bg}\n      height=\"auto\"\n      maxHeight=\"100vh\"\n      padding=\"10vh\"\n    >\n\t\n\t\t\t<Text color={colors.text}>Portfolio</Text>\n      \t\t<Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\n\t\t\t\t{data.map((pred, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\tkey={i}\n\t\t\t    \t\t\t// onClick={}\n\t\t\t\t\t\t\tdisplay=\"flex\"\n\t\t\t\t\t\t\tmaxWidth=\"300px\"\n\t\t\t\t\t\t\tflexDirection=\"row\"\n\t\t\t\t\t\t\tborder=\"1px solid\"\n\t\t\t\t\t\t\tborderRadius=\"15px\"\n\t\t\t\t\t\t\tpadding=\"20px\"\n\t\t\t\t\t\t\tmargin=\"10px\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Token id &nbsp;: &nbsp; {pred.id} &nbsp;</Text>\n\t\t\t\t\t\t\t\t<Text color={colors.text}>Balance &nbsp; :&nbsp; {pred.balance}</Text>\n\t\t\t\t\t\t</Box>\n\t\t            );\n                })}\n\t\t\t</Box>\n\t\t  </Container>\n \n  ):(\n    <Loading />\n  );\n};\n\t\n","import React from 'react';\nimport { BrowserRouter, Routes, Route, useParams  } from 'react-router-dom';\nimport { ChakraProvider, ColorModeProvider } from '@chakra-ui/react';\nimport Header from './components/Header';\nimport Predict from './components/Predict';\nimport './App.css';\nimport Home from './components/Home';\nimport { ContractProvider, CONTRACT_ADDRESS } from './helper/tezos';\nimport PredictionContext from './helper/PredictionContext';\nimport Loading from './helper/Loading';\nimport MyPreds from './components/Mypreds';\n\nfunction App() {\n  const [predictions, setPredictions] = React.useState(null);\n  const [predictionsArray, setPredictionsArray] = React.useState([]);\n  const updatePredictions = (preds, predArray) => {\n    setPredictions(preds);\n    setPredictionsArray(predArray);\n  };\n  const { id } = useParams();\n\n  React.useEffect(() => {\n    ContractProvider.at(CONTRACT_ADDRESS).then(async (contract) => {\n      const storage = await contract.storage();\n      const predictions = storage.predictions;\n\t  const counter = storage.Id;\n\t  const predList = [];\n      // for (let key of storage.predictTokenDetails.keys()) {\n      //   console.log(key);\n      //   console.log(storage.predictTokenDetails.get(key));\n      // }\n      for (let pred =10; pred < counter; pred++  ) {\n\t  \t await predictions.get(pred).then(value => { predList.push({ id: pred, value }) });\n\t\t \n      \n      }\n      updatePredictions(predictions, predList);\n\t\n    });\n  }, []);\n\n  return (\n    <ChakraProvider>\n      <ColorModeProvider\n        options={{\n          initialColorMode: 'dark',\n          useSystemColorMode: true,\n        }}\n      >\n        {predictions ? (\n          <>\n            <PredictionContext.Provider\n              value={{\n                predictions,\n                predictionsArray,\n                updatePredictions,\n              }}\n            >\n              <BrowserRouter>\n                <Header />\n\t\t\t\t<Routes>\n                <Route exact path=\"/\"  element = {<Home />} />  \n\t\t\t\t\n\t\t\t\t\n                <Route\n                  path=\"/predict/:id\"\n                  element = {<Predict />}\n                />\n\n                <Route path=\"/mypreds\" element ={<MyPreds />} />\n\t\t\t\t</Routes>\n              </BrowserRouter>\n            </PredictionContext.Provider>\n          </>\n        ) : (\n          <Loading />\n        )}\n      </ColorModeProvider>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ColorModeScript } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode=\"dark\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}